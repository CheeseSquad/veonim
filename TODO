remove unused files. go thru everything
remove unusued deps. go thru everything

remove react-redux dependency when removing dedox
react-tiny-virtual-list for virtual lists?

readme update: demo:
  - add note about how veonim auto reloads files on changes

create a simple hyperapp virtualized list component that simply renders dom nodes
  given a slice of the list. you want the top of the list, slice(0, 10)
  you want the end, slice(list.length - 10), etc. no mouse support for now.
  keep it simple and easy. make it composable

adjust positioning of new react plugins to be correct (center or float right, etc.)

neovim.jumpTo: don't hide cursor/cursorline from background window.
  we want to jump to and see results in window

remove 'name' -> element.id support in overlay2. id is now set by uikit2

back to hyperapp:
- remove redux
- create a wrapper around hyperapp? problems to solve:
  - want to bind redux devtools if we are in dev mode
  - by default would like to bind to #plugins container. dont want to specify on every call
  - i like the object props syntax better
  - for some reason not getting completions from 'ui' object. can force typings...

- move icons out of this package. i thought about using react-feather but that
  seems like overkill just to render an icon. would prefer to keep it lightweight
  after all it's just an svg

files not refresh after delete file

-- react overkill -> hyperapp
problem-info

showcase/demo fuzzy buffer find in docs
showcase/demo quickfix

is it just me or is the :Veonim buffers list also listing unlistable buffers?
do we need to filter out the buffers according to BufferOption.Listed prop?

- SHADOW BUFFERS -
the problem with shadow buffers is that our current neovim window render strategy
just picks a random html div and does its thing. we need to be semantic and render
windwos to specific divs. we need to associate a specific div with a specific vim
window and maintain that relationship so that shadow buffers are tied to the correct
html element.

shadow buffers:
cursor.ts does not recognize current window as shadow-buffer-type anymore... what changed?
re-ordering windows fail - try creating new split when a shadow buffer already open

what to do when shadow buffer component goes back to normal mode?? need to display
some sort of visual feedback. don't move cursor around etc. maybe also disable notifications

// TODO: in addition to close/rename, we also need to detect when a window gets reassigned
// and unload/reload shadow buffer. window container elements do not follow vim windows

are we still resizing inappropriately?
try to see what happens with NERDTree when open a layout like this
left nerd, middle two horizontal splits, right open ;ve
| | | |
|-|-|-|
| | | |
does it get resized equally?

explorer:
<tab> key is doing something weird. check on it
add action to open file in LAST/ALTERNATE buffer, NOT the current one!
don't auto select (active: ix === $.ix) an item in the list unless we have focus
redo home, next, prev keybinds for explorer to not use ctrl + hjkl
figure out better name for embed custom render buffers
generalize embed buffers to support any components
figure out how to swap between different embed components (get buffer name?)
can we support multiple embed components, one per each buffer instance? or shared?
nameplate title changes on window change

SHADOW BUFFER ARCH DESIGN --

function to register a function that will create new instances of embed
components. right now we assume only one instance, but allow the possibility
of multiple instances in the future

global method registerShadowComponent(() => {
  name: string,
  element: HTMLElement,
  onFocus: Function,
  onBlur: Function,
  onShow: Function,
  onHide: Function,
  // maybe?
  // onActivate: Function,
})

each embed component module will self-register. this works like neovim.action() - in that
i would prefer the component to manage registration on init instead of some 3rd party
module that has to keep track of all components and register them


should embed components be generated once, then onShow/onHide when they appear in the
window grid, or should they be generated every time they appear in the windows, and
self-destruct when buffer closed?

could be expensive to recreate and destroy all the time. at the same time it could be memory
intensive to keep around a bunch of component elements.

also, if we decide to list shadow buffers in the buffer list (currently: yes) then how
could we list multiple without confusion?

i think the most viable plan of attack is to requireDir(../components).then(() => {
  const shadowBuffers = new Map()
  registeredShadowComponents.forEach(initFn => {
    const { name, ...stuff } = initFn()
    shadowBuffers.set(name, stuff)
    createShadowBuffer(name)
  })
})

and later in windows.ts

// another map here to track current active shadow buffers
// might get messy to track active in `shadowBuffers`
// also keep this win stuff localized to this module, instead of
// muddying the global store (which should be immutable after initial
// app load - unless we plan to dynamically load components at
// runtime in the future?)
const activeShadowBuffers = new Map()

neovim.on.bufUnload(s => {
  if (!activeShadowBuffers.has(s.name)) return

  const win = activeShadowBuffers.get(s.name)
  // use an attribute to denote shadow buffer type?
  win.canvasBox.remove(shadowBufferElement)
  win.canvas.style.display = 'block'
  activeShadowBuffers.delete(s.name)
})

if (vm.filetype === 'shadow-buffer') {
  const shabuf = shadowBuffers.get(vm.name)
  if (!shabuf) return
  canvas.style.display = 'none'
  win.canvasBox.appendChild(shabuf.element)
  activeShadowBuffers.add(vm.name, win)
} else {
  // somehow remove the shadow buffer element. not good enough! because we could
  // have multiple shadow buffers

  // maybe use bufUnload? how would that work...
  win.canvasBox.remove(shabuf.element)
}

--

should probably stop auto adjusting windows with (wincmd =)
  this is immediatly obvious now with non-equal width windows (embed explorer)
  can we be smarter about this? maybe figure out widths before resize grid?
  only apply wincmd = in certain conditions?

check on the background of embed explorer, not sure it's the exact same bg color as vim.bg
- using digital color meter.app it is confirmed that the colors are slightly
  off. i checked the logic for setting background is being set correct. in
  fact, when i took the exact bg color specified in the colorscheme.vim and
  applied it directly to the element background color, the subtle color
  difference still persisted. i wonder if the color convert for canvas is doing
  something slightly off. or perhaps html divs have some sort of color profile
  applied but canvas do not...

rpc errors send to notifications? (try calling some broken execute() vimscript from usermenu)

new react overlay menus are not centered...

create demo script to start electron at a certain size
open various features
use electron/spectron screenshot feature
save to docs

upgrade ripgrep

--ideas--

i want the ability to be able to record multiple macros and name them. i want some sort of visual
selector gui so i can retrieve and rerun macros without having to remember what macro register
i saved, and what the usage for a particular macro is supposed to be. this can work similar
to the marks popup idea below

create find overlay at the top or bottom of current window (like xcode/vscode/atom/sublime/etc). used for builtin vim / or ? and can be used by custom components (viewport fuzzy search)
  - maybe the design can integrate somehow with the buffer fuzzy search list

set process.env.XDG_CONFIG_HOME in dev to use alt vim/extensions folders when testing dev that do not conflict with release builds

easymotion show bigger letters + show WHILE searching ooooooo

constrain overlay menus to a particular window (current window)
  - (if it makes sense to be local - some might be global - like user menus or project switcher)
  - i.e. show symbol/file menu on top of the current buffer window, instead of the center of the program,
    since selecting a symbol or file will make changes in the current window, not globally
start splash screen include MRU projects
easymotion jump to highlighted word
buffer-search should only search in the current viewport. no scrolling pls
create fuzzy search for entire buffer, but use popup menu
terminal change title to current running process
backfill problems into quickfix list

:: try with new floating windows api for this? then it can all be supported in vimscript

press and hold mark ' keybind to bring up menu of current global marks
menu lists something like
a - support.ts
s - utils.ts
d - main.ts

pressing one of the keys takes you to that file
releasing mark keybind closes menu without any navigation
(think kinda like opie addon, but hold activate)

- mru file jump list
the use case is that i may be jumping thru files either via...
  - goto definition
  - find references

...and i want to go back to the original starting point. the trick is that the
jump list may have other intermediary jumps, so that's not good enough, as i
may have to hit multiple times c-o to go back to origin point.

marks are also not good because i may forget to set them, and sometimes i may
decide to go back to a different origin point (or not all the way up the jump
list chain)

there is go to previous buffer (:b# i think) - but in my testing it does not
seem to function the way i thought it would. plus, if i do indeed side track as
a tangent to another buffer, then this previous buffer process will be
incorrect


-- auto close stale terminal buffers? i.e. if there is no running process in
bash, then if i navigate to a non-term buffer, auto-close the terminal session?
(start new ones instead of switching back). this might solve the problem of
having to remember exactly which terminal might be available for use? right now
terminals are difficult to discern as they just have random numbers, but in the
future if we can name running process in term, thennnnnnnn
